{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to noscrape Documentation Welcome to the official documentation for noscrape ! This guide will help you understand the concept, usage, and benefits of integrating noscrape into your projects. Concept The primary mechanism behind noscrape is the utilization of any true-type font. Noscrape generates a new version with shuffled unicodes, ensuring that it's impossible to reverse-calculate them. This means that both strings and integers are obfuscated and can only be deciphered using the generated obfuscation-font. While the glyph-paths inside the font cannot be entirely removed, they are obfuscated by randomly shifting them slightly. This makes it challenging to reverse-calculate them, though not entirely impossible, especially for machine learning algorithms. We are open to suggestions for improving this aspect. Use-Cases In an era where artificial intelligence is becoming increasingly integral to our daily lives, it's important to remember that AI thrives on data, and your data is a valuable commodity that shouldn't be given away lightly. Here are some key use-cases for noscrape: Anti-Scraping Measures for Websites Implement noscrape on your website to protect against web scrapers. This can be particularly useful for content that is unique to your site, which you wish to prevent from being copied or used without permission. Examples include: Sport results Betting results Prices (e-commerce) Geo-information Protecting Sensitive Data Use noscrape to obfuscate sensitive information such as personal identifiers, financial details, or confidential text in a way that is visually accessible but protected against scraping and automated data extraction tools. Reduce Bot Interactions Once your data is protected by noscrape, it makes no sense for scrapers to target it, thereby reducing the number of bot interactions and lowering associated costs. Secure Applications In applications where data security is paramount, such as in banking or healthcare apps, noscrape can be used to display information in a secure manner. Examples include: PIN/TAN numbers Bot protection (captcha) Language Implementations Java Implementation PHP Implementation NodeJS/TypeScript Implementation Platform Implementation noscrape is not implemented directly in every programming language. Instead, it utilizes platform-specific binaries to achieve its functionality. These binaries include: noscrape_darwin_arm64 noscrape_darwin_x86_64 noscrape_linux_arm64 noscrape_linux_x86_64 noscrape_windows_x86_64.exe These binaries serve as the core engine of noscrape , handling the generation of obfuscated text using true-type fonts with shuffled unicodes. They are compiled to run efficiently on specific operating systems and architectures. Note: If you require noscrape for a different operating system or architecture combination, please open a GitHub issue, and we'll work on providing support for it. Wrapper Implementations The implementations provided in languages such as PHP, Java, and Node.js act as wrappers for these binaries. Their main purpose is to facilitate communication with the noscrape binaries, providing them with the necessary inputs and configurations to generate obfuscated text. These wrapper implementations handle tasks such as: Collecting input data from the application or user. Calling the appropriate noscrape binary based on the host platform. Passing the input data to the noscrape binary for obfuscation. Returning the obfuscated text or other outputs back to the application. By utilizing wrappers, noscrape can seamlessly integrate with a wide range of programming languages and environments while maintaining its core functionality across different platforms. Let's make the web a safer place with noscrape!","title":"Welcome"},{"location":"#welcome-to-noscrape-documentation","text":"Welcome to the official documentation for noscrape ! This guide will help you understand the concept, usage, and benefits of integrating noscrape into your projects.","title":"Welcome to noscrape Documentation"},{"location":"#concept","text":"The primary mechanism behind noscrape is the utilization of any true-type font. Noscrape generates a new version with shuffled unicodes, ensuring that it's impossible to reverse-calculate them. This means that both strings and integers are obfuscated and can only be deciphered using the generated obfuscation-font. While the glyph-paths inside the font cannot be entirely removed, they are obfuscated by randomly shifting them slightly. This makes it challenging to reverse-calculate them, though not entirely impossible, especially for machine learning algorithms. We are open to suggestions for improving this aspect.","title":"Concept"},{"location":"#use-cases","text":"In an era where artificial intelligence is becoming increasingly integral to our daily lives, it's important to remember that AI thrives on data, and your data is a valuable commodity that shouldn't be given away lightly. Here are some key use-cases for noscrape:","title":"Use-Cases"},{"location":"#anti-scraping-measures-for-websites","text":"Implement noscrape on your website to protect against web scrapers. This can be particularly useful for content that is unique to your site, which you wish to prevent from being copied or used without permission. Examples include: Sport results Betting results Prices (e-commerce) Geo-information","title":"Anti-Scraping Measures for Websites"},{"location":"#protecting-sensitive-data","text":"Use noscrape to obfuscate sensitive information such as personal identifiers, financial details, or confidential text in a way that is visually accessible but protected against scraping and automated data extraction tools.","title":"Protecting Sensitive Data"},{"location":"#reduce-bot-interactions","text":"Once your data is protected by noscrape, it makes no sense for scrapers to target it, thereby reducing the number of bot interactions and lowering associated costs.","title":"Reduce Bot Interactions"},{"location":"#secure-applications","text":"In applications where data security is paramount, such as in banking or healthcare apps, noscrape can be used to display information in a secure manner. Examples include: PIN/TAN numbers Bot protection (captcha)","title":"Secure Applications"},{"location":"#language-implementations","text":"Java Implementation PHP Implementation NodeJS/TypeScript Implementation","title":"Language Implementations"},{"location":"#platform-implementation","text":"noscrape is not implemented directly in every programming language. Instead, it utilizes platform-specific binaries to achieve its functionality. These binaries include: noscrape_darwin_arm64 noscrape_darwin_x86_64 noscrape_linux_arm64 noscrape_linux_x86_64 noscrape_windows_x86_64.exe These binaries serve as the core engine of noscrape , handling the generation of obfuscated text using true-type fonts with shuffled unicodes. They are compiled to run efficiently on specific operating systems and architectures. Note: If you require noscrape for a different operating system or architecture combination, please open a GitHub issue, and we'll work on providing support for it.","title":"Platform Implementation"},{"location":"#wrapper-implementations","text":"The implementations provided in languages such as PHP, Java, and Node.js act as wrappers for these binaries. Their main purpose is to facilitate communication with the noscrape binaries, providing them with the necessary inputs and configurations to generate obfuscated text. These wrapper implementations handle tasks such as: Collecting input data from the application or user. Calling the appropriate noscrape binary based on the host platform. Passing the input data to the noscrape binary for obfuscation. Returning the obfuscated text or other outputs back to the application. By utilizing wrappers, noscrape can seamlessly integrate with a wide range of programming languages and environments while maintaining its core functionality across different platforms. Let's make the web a safer place with noscrape!","title":"Wrapper Implementations"},{"location":"install/","text":"How To","title":"How To"},{"location":"install/#how-to","text":"","title":"How To"},{"location":"java/","text":"Java todo...","title":"Java"},{"location":"java/#java","text":"todo...","title":"Java"},{"location":"node/","text":"NodeJS todo...","title":"NodeJS"},{"location":"node/#nodejs","text":"todo...","title":"NodeJS"},{"location":"php/","text":"Noscrape - PHP Installation To begin, install the noscrape library using Composer, which allows you to effortlessly manage your project's dependencies: $ composer require noscrape/noscrape New Instance Create a new instance of the noscrape class by providing the path to your desired font file. This sets up noscrape to use the specified font for obfuscating text: $noscrape = new Noscrape(\"path/to/font.ttf\"); Obfuscation Obfuscate your text by calling the obfuscate method on your noscrape instance. This will convert your text into a series of unique characters from the Private Use Area (PUA) of Unicode, making it unreadable by standard means: $obfuscatedText = $noscrape->obfuscate(\"text to obfuscate\"); echo $obfuscatedText; > \ue41a\ue1a4\ue6b4\ue41a\uefaf\ue41a\uf1cb\uefaf\uf1cb\uebbe\ue0e3\ue49f\uf477\ue32f\uee92\ue41a\ue1a4 // one could also obfuscate an integer $obfuscatedInt = $noscrape->obfuscate(1337); // or an array $obfuscatedArray = $noscrape->obfuscate([ \"test\" => \"This is a Test\", \"another\" => [ \"test\" => \"This is another Test\", ] ]); /* [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\ue607\uedac\uf28a\uec14\uef3f\", \"another\" => [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\uf85c\ue95f\uef3f\uf3ec\uf28a\uf6fc\ue607\uedac\uf28a\uec14\uef3f\", ] ] */ Rendering Render the obfuscated font into a Base64-encoded string using the render method. This encoded string can then be embedded directly into your HTML for easy use: $b64Font = $noscrape->render(); echo $b64Font; > T1RUTwAJAIAAAwAQQ0ZGIIaTIyUAAAVkAAARe09TLzL4TxrlAAABAAAAAGBjbWFwACT... Putting it together Combine everything into a complete HTML document. Embed the Base64-encoded font directly in your HTML using the @font-face rule and apply the obfuscated font to your text with CSS. This ensures that the obfuscated text is displayed correctly in the browser: <!DOCTYPE html> <html lang=\"en\"> <head> <style> @font-face { font-family: 'noscrape-obfuscated'; src: url(\"data:font/truetype;charset=utf-8;base64,{{ $font }}\") } .obfuscated { font-family: \"noscrape-obfuscated\"; } </style> </head> <body> <div class=\"obfuscated\">{{ $obfuscatedText }}</div> </body> </html> Laravel Example In a Laravel application, you can easily integrate noscrape by creating a new instance of the noscrape class in your controller or route. Use the public_path function to provide the path to your font file. Pass the obfuscated text and font to your view: Route::get('/', function () { $noscrape = new Noscrape(public_path(\"font/anyfont.ttf\")); return view('welcome', [ 'title' => $noscrape->obfuscate(\"Welcome to Noscrape\"), 'description' => $noscrape->obfuscate(\"This is text is obfuscated.\"), 'font' => $noscrape->render() ]); });","title":"PHP"},{"location":"php/#noscrape-php","text":"","title":"Noscrape - PHP"},{"location":"php/#installation","text":"To begin, install the noscrape library using Composer, which allows you to effortlessly manage your project's dependencies: $ composer require noscrape/noscrape","title":"Installation"},{"location":"php/#new-instance","text":"Create a new instance of the noscrape class by providing the path to your desired font file. This sets up noscrape to use the specified font for obfuscating text: $noscrape = new Noscrape(\"path/to/font.ttf\");","title":"New Instance"},{"location":"php/#obfuscation","text":"Obfuscate your text by calling the obfuscate method on your noscrape instance. This will convert your text into a series of unique characters from the Private Use Area (PUA) of Unicode, making it unreadable by standard means: $obfuscatedText = $noscrape->obfuscate(\"text to obfuscate\"); echo $obfuscatedText; > \ue41a\ue1a4\ue6b4\ue41a\uefaf\ue41a\uf1cb\uefaf\uf1cb\uebbe\ue0e3\ue49f\uf477\ue32f\uee92\ue41a\ue1a4 // one could also obfuscate an integer $obfuscatedInt = $noscrape->obfuscate(1337); // or an array $obfuscatedArray = $noscrape->obfuscate([ \"test\" => \"This is a Test\", \"another\" => [ \"test\" => \"This is another Test\", ] ]); /* [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\ue607\uedac\uf28a\uec14\uef3f\", \"another\" => [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\uf85c\ue95f\uef3f\uf3ec\uf28a\uf6fc\ue607\uedac\uf28a\uec14\uef3f\", ] ] */","title":"Obfuscation"},{"location":"php/#rendering","text":"Render the obfuscated font into a Base64-encoded string using the render method. This encoded string can then be embedded directly into your HTML for easy use: $b64Font = $noscrape->render(); echo $b64Font; > T1RUTwAJAIAAAwAQQ0ZGIIaTIyUAAAVkAAARe09TLzL4TxrlAAABAAAAAGBjbWFwACT...","title":"Rendering"},{"location":"php/#putting-it-together","text":"Combine everything into a complete HTML document. Embed the Base64-encoded font directly in your HTML using the @font-face rule and apply the obfuscated font to your text with CSS. This ensures that the obfuscated text is displayed correctly in the browser: <!DOCTYPE html> <html lang=\"en\"> <head> <style> @font-face { font-family: 'noscrape-obfuscated'; src: url(\"data:font/truetype;charset=utf-8;base64,{{ $font }}\") } .obfuscated { font-family: \"noscrape-obfuscated\"; } </style> </head> <body> <div class=\"obfuscated\">{{ $obfuscatedText }}</div> </body> </html>","title":"Putting it together"},{"location":"php/#laravel-example","text":"In a Laravel application, you can easily integrate noscrape by creating a new instance of the noscrape class in your controller or route. Use the public_path function to provide the path to your font file. Pass the obfuscated text and font to your view: Route::get('/', function () { $noscrape = new Noscrape(public_path(\"font/anyfont.ttf\")); return view('welcome', [ 'title' => $noscrape->obfuscate(\"Welcome to Noscrape\"), 'description' => $noscrape->obfuscate(\"This is text is obfuscated.\"), 'font' => $noscrape->render() ]); });","title":"Laravel Example"}]}