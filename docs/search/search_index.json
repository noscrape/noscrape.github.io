{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Noscrape todo...","title":"Welcome"},{"location":"#welcome-to-noscrape","text":"todo...","title":"Welcome to Noscrape"},{"location":"install/","text":"How To","title":"How To"},{"location":"install/#how-to","text":"","title":"How To"},{"location":"java/","text":"Java todo...","title":"Java"},{"location":"java/#java","text":"todo...","title":"Java"},{"location":"node/","text":"NodeJS todo...","title":"NodeJS"},{"location":"node/#nodejs","text":"todo...","title":"NodeJS"},{"location":"php/","text":"Noscrape - PHP Installation To begin, install the NoScrape library using Composer, which allows you to effortlessly manage your project's dependencies: $ composer require noscrape/noscrape New Instance Create a new instance of the NoScrape class by providing the path to your desired font file. This sets up NoScrape to use the specified font for obfuscating text: $noscrape = new Noscrape(\"path/to/font.ttf\"); Obfuscation Obfuscate your text by calling the obfuscate method on your NoScrape instance. This will convert your text into a series of unique characters from the Private Use Area (PUA) of Unicode, making it unreadable by standard means: $obfuscatedText = $noscrape->obfuscate(\"text to obfuscate\"); echo $obfuscatedText; > \ue41a\ue1a4\ue6b4\ue41a\uefaf\ue41a\uf1cb\uefaf\uf1cb\uebbe\ue0e3\ue49f\uf477\ue32f\uee92\ue41a\ue1a4 // one could also obfuscate an integer $obfuscatedInt = $noscrape->obfuscate(1337); // or an array $obfuscatedArray = $noscrape->obfuscate([ \"test\" => \"This is a Test\", \"another\" => [ \"test\" => \"This is another Test\", ] ]); /* [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\ue607\uedac\uf28a\uec14\uef3f\", \"another\" => [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\uf85c\ue95f\uef3f\uf3ec\uf28a\uf6fc\ue607\uedac\uf28a\uec14\uef3f\", ] ] */ Rendering Render the obfuscated font into a Base64-encoded string using the render method. This encoded string can then be embedded directly into your HTML for easy use: $b64Font = $noscrape->render(); echo $b64Font; > T1RUTwAJAIAAAwAQQ0ZGIIaTIyUAAAVkAAARe09TLzL4TxrlAAABAAAAAGBjbWFwACT... Putting it together Combine everything into a complete HTML document. Embed the Base64-encoded font directly in your HTML using the @font-face rule and apply the obfuscated font to your text with CSS. This ensures that the obfuscated text is displayed correctly in the browser: <!DOCTYPE html> <html lang=\"en\"> <head> <style> @font-face { font-family: 'noscrape-obfuscated'; src: url(\"data:font/truetype;charset=utf-8;base64,{{ $font }}\") } .obfuscated { font-family: \"noscrape-obfuscated\"; } </style> </head> <body> <div class=\"obfuscated\">{{ $obfuscatedText }}</div> </body> </html> Laravel Example Route::get('/', function () { $noscrape = new Noscrape(public_path(\"font/anyfont.ttf\")); return view('welcome', [ 'title' => $noscrape->obfuscate(\"Welcome to Noscrape\"), 'description' => $noscrape->obfuscate(\"This is text is obfuscated.\"), 'font' => $noscrape->render() ]); });","title":"PHP"},{"location":"php/#noscrape-php","text":"","title":"Noscrape - PHP"},{"location":"php/#installation","text":"To begin, install the NoScrape library using Composer, which allows you to effortlessly manage your project's dependencies: $ composer require noscrape/noscrape","title":"Installation"},{"location":"php/#new-instance","text":"Create a new instance of the NoScrape class by providing the path to your desired font file. This sets up NoScrape to use the specified font for obfuscating text: $noscrape = new Noscrape(\"path/to/font.ttf\");","title":"New Instance"},{"location":"php/#obfuscation","text":"Obfuscate your text by calling the obfuscate method on your NoScrape instance. This will convert your text into a series of unique characters from the Private Use Area (PUA) of Unicode, making it unreadable by standard means: $obfuscatedText = $noscrape->obfuscate(\"text to obfuscate\"); echo $obfuscatedText; > \ue41a\ue1a4\ue6b4\ue41a\uefaf\ue41a\uf1cb\uefaf\uf1cb\uebbe\ue0e3\ue49f\uf477\ue32f\uee92\ue41a\ue1a4 // one could also obfuscate an integer $obfuscatedInt = $noscrape->obfuscate(1337); // or an array $obfuscatedArray = $noscrape->obfuscate([ \"test\" => \"This is a Test\", \"another\" => [ \"test\" => \"This is another Test\", ] ]); /* [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\ue607\uedac\uf28a\uec14\uef3f\", \"another\" => [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\uf85c\ue95f\uef3f\uf3ec\uf28a\uf6fc\ue607\uedac\uf28a\uec14\uef3f\", ] ] */","title":"Obfuscation"},{"location":"php/#rendering","text":"Render the obfuscated font into a Base64-encoded string using the render method. This encoded string can then be embedded directly into your HTML for easy use: $b64Font = $noscrape->render(); echo $b64Font; > T1RUTwAJAIAAAwAQQ0ZGIIaTIyUAAAVkAAARe09TLzL4TxrlAAABAAAAAGBjbWFwACT...","title":"Rendering"},{"location":"php/#putting-it-together","text":"Combine everything into a complete HTML document. Embed the Base64-encoded font directly in your HTML using the @font-face rule and apply the obfuscated font to your text with CSS. This ensures that the obfuscated text is displayed correctly in the browser: <!DOCTYPE html> <html lang=\"en\"> <head> <style> @font-face { font-family: 'noscrape-obfuscated'; src: url(\"data:font/truetype;charset=utf-8;base64,{{ $font }}\") } .obfuscated { font-family: \"noscrape-obfuscated\"; } </style> </head> <body> <div class=\"obfuscated\">{{ $obfuscatedText }}</div> </body> </html>","title":"Putting it together"},{"location":"php/#laravel-example","text":"Route::get('/', function () { $noscrape = new Noscrape(public_path(\"font/anyfont.ttf\")); return view('welcome', [ 'title' => $noscrape->obfuscate(\"Welcome to Noscrape\"), 'description' => $noscrape->obfuscate(\"This is text is obfuscated.\"), 'font' => $noscrape->render() ]); });","title":"Laravel Example"}]}