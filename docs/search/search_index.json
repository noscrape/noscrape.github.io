{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to noscrape Welcome to the official documentation for noscrape ! This guide will help you understand the concept, usage, and benefits of integrating noscrape into your projects. Concept The primary mechanism behind noscrape is the utilization of any true-type font. Noscrape generates a new version with shuffled unicodes, ensuring that it's impossible to reverse-calculate them. This means that both strings and integers are obfuscated and can only be deciphered using the generated obfuscation-font. While the glyph-paths inside the font cannot be entirely removed, they are obfuscated by randomly shifting them slightly. This makes it challenging to reverse-calculate them, though not entirely impossible, especially for machine learning algorithms. We are open to suggestions for improving this aspect. sequenceDiagram participant User participant Server participant Noscrape User->>Server: Send Request Server->>Noscrape: Initialize noscrape Server->>Noscrape: obfuscatedText1 = noscrape.obfuscate(\"text to obfuscate\") Server->>Noscrape: obfuscatedText2 = noscrape.obfuscate(\"another textblock\") Noscrape-->>Server: Return Obfuscated Text Server->>Noscrape: font = noscrape.render() Noscrape-->>Server: Return Generated Font Server->>User: Send HTML Response with Obfuscated Text and Embedded Font Platform Implementation noscrape is not implemented directly in every programming language. Instead, it utilizes platform-specific binaries to achieve its functionality. These binaries include: noscrape_darwin_arm64 noscrape_darwin_x86_64 noscrape_linux_arm64 noscrape_linux_x86_64 noscrape_windows_x86_64.exe These binaries serve as the core engine of noscrape , handling the generation of obfuscated text using true-type fonts with shuffled unicodes. They are compiled to run efficiently on specific operating systems and architectures. Note: If you require noscrape for a different operating system or architecture combination, please open a GitHub issue, and we'll work on providing support for it. Wrapper Implementations The implementations provided in languages such as PHP, Java, and Node.js act as wrappers for these binaries. Their main purpose is to facilitate communication with the noscrape binaries, providing them with the necessary inputs and configurations to generate obfuscated text. These wrapper implementations handle tasks such as: Collecting input data from the application or user. Calling the appropriate noscrape binary based on the host platform. Passing the input data to the noscrape binary for obfuscation. Returning the obfuscated text or other outputs back to the application. By utilizing wrappers, noscrape can seamlessly integrate with a wide range of programming languages and environments while maintaining its core functionality across different platforms. Let's make the web a safer place with noscrape!","title":"Introduction"},{"location":"#welcome-to-noscrape","text":"Welcome to the official documentation for noscrape ! This guide will help you understand the concept, usage, and benefits of integrating noscrape into your projects.","title":"Welcome to noscrape"},{"location":"#concept","text":"The primary mechanism behind noscrape is the utilization of any true-type font. Noscrape generates a new version with shuffled unicodes, ensuring that it's impossible to reverse-calculate them. This means that both strings and integers are obfuscated and can only be deciphered using the generated obfuscation-font. While the glyph-paths inside the font cannot be entirely removed, they are obfuscated by randomly shifting them slightly. This makes it challenging to reverse-calculate them, though not entirely impossible, especially for machine learning algorithms. We are open to suggestions for improving this aspect. sequenceDiagram participant User participant Server participant Noscrape User->>Server: Send Request Server->>Noscrape: Initialize noscrape Server->>Noscrape: obfuscatedText1 = noscrape.obfuscate(\"text to obfuscate\") Server->>Noscrape: obfuscatedText2 = noscrape.obfuscate(\"another textblock\") Noscrape-->>Server: Return Obfuscated Text Server->>Noscrape: font = noscrape.render() Noscrape-->>Server: Return Generated Font Server->>User: Send HTML Response with Obfuscated Text and Embedded Font","title":"Concept"},{"location":"#platform-implementation","text":"noscrape is not implemented directly in every programming language. Instead, it utilizes platform-specific binaries to achieve its functionality. These binaries include: noscrape_darwin_arm64 noscrape_darwin_x86_64 noscrape_linux_arm64 noscrape_linux_x86_64 noscrape_windows_x86_64.exe These binaries serve as the core engine of noscrape , handling the generation of obfuscated text using true-type fonts with shuffled unicodes. They are compiled to run efficiently on specific operating systems and architectures. Note: If you require noscrape for a different operating system or architecture combination, please open a GitHub issue, and we'll work on providing support for it.","title":"Platform Implementation"},{"location":"#wrapper-implementations","text":"The implementations provided in languages such as PHP, Java, and Node.js act as wrappers for these binaries. Their main purpose is to facilitate communication with the noscrape binaries, providing them with the necessary inputs and configurations to generate obfuscated text. These wrapper implementations handle tasks such as: Collecting input data from the application or user. Calling the appropriate noscrape binary based on the host platform. Passing the input data to the noscrape binary for obfuscation. Returning the obfuscated text or other outputs back to the application. By utilizing wrappers, noscrape can seamlessly integrate with a wide range of programming languages and environments while maintaining its core functionality across different platforms. Let's make the web a safer place with noscrape!","title":"Wrapper Implementations"},{"location":"nodejs/","text":"Noscrape - Node Installation To begin, install the noscrape library using npm : $ npm install noscrape New Instance Create a new instance of the noscrape class by providing the path to your desired font file. This sets up noscrape to use the specified font for obfuscating text: # with require const { Noscrape } = require(\"noscrape\"); # or import (ECMAScript Module) import { Noscrape } from \"noscrape\"; const noscrape = new Noscrape(\"path/to/font.ttf\"); Obfuscation Obfuscate your text by calling the obfuscate method on your noscrape instance. This will convert your text into a series of unique characters from the Private Use Area (PUA) of Unicode, making it unreadable by standard means: const obfuscatedText = noscrape.obfuscate(\"text to obfuscate\"); console.log(obfuscatedText); > \ue41a\ue1a4\ue6b4\ue41a\uefaf\ue41a\uf1cb\uefaf\uf1cb\uebbe\ue0e3\ue49f\uf477\ue32f\uee92\ue41a\ue1a4 // one could also obfuscate an integer obfuscatedInt = noscrape.obfuscate(1337); // or an array obfuscatedArray = noscrape.obfuscate({ test: \"This is a Test\", another: { test: \"This is another Test\", } }); Rendering Render the obfuscated font into a Base64-encoded string using the render method. This encoded string can then be embedded directly into your HTML for easy use: const b64Font = noscrape.render(); console.log(b64Font.toString(\"base64\"); > T1RUTwAJAIAAAwAQQ0ZGIIaTIyUAAAVkAAARe09TLzL4TxrlAAABAAAAAGBjbWFwACT... Putting it together Combine everything into a complete HTML document. Embed the Base64-encoded font directly in your HTML using the @font-face rule and apply the obfuscated font to your text with CSS. This ensures that the obfuscated text is displayed correctly in the browser: <html lang=\"en\"> <head> <title>Noscrape - DEMO</title> <style> @font-face { font-family: 'noscrape-obfuscated'; src: url('data:font/truetype;charset=utf-8;base64,${font.toString(\"base64\")}'); } </style> </head> <body> <div style=\"font-family: 'noscrape-obfuscated'\">${obfuscated}</div> </body> </html> Running Example $ git clone git@github.com:noscrape/noscrape-node-example.git $ cd noscrape-node-example $ npm install $ node src/index.js open http://localhost:1234","title":"NodeJS"},{"location":"nodejs/#noscrape-node","text":"","title":"Noscrape - Node"},{"location":"nodejs/#installation","text":"To begin, install the noscrape library using npm : $ npm install noscrape","title":"Installation"},{"location":"nodejs/#new-instance","text":"Create a new instance of the noscrape class by providing the path to your desired font file. This sets up noscrape to use the specified font for obfuscating text: # with require const { Noscrape } = require(\"noscrape\"); # or import (ECMAScript Module) import { Noscrape } from \"noscrape\"; const noscrape = new Noscrape(\"path/to/font.ttf\");","title":"New Instance"},{"location":"nodejs/#obfuscation","text":"Obfuscate your text by calling the obfuscate method on your noscrape instance. This will convert your text into a series of unique characters from the Private Use Area (PUA) of Unicode, making it unreadable by standard means: const obfuscatedText = noscrape.obfuscate(\"text to obfuscate\"); console.log(obfuscatedText); > \ue41a\ue1a4\ue6b4\ue41a\uefaf\ue41a\uf1cb\uefaf\uf1cb\uebbe\ue0e3\ue49f\uf477\ue32f\uee92\ue41a\ue1a4 // one could also obfuscate an integer obfuscatedInt = noscrape.obfuscate(1337); // or an array obfuscatedArray = noscrape.obfuscate({ test: \"This is a Test\", another: { test: \"This is another Test\", } });","title":"Obfuscation"},{"location":"nodejs/#rendering","text":"Render the obfuscated font into a Base64-encoded string using the render method. This encoded string can then be embedded directly into your HTML for easy use: const b64Font = noscrape.render(); console.log(b64Font.toString(\"base64\"); > T1RUTwAJAIAAAwAQQ0ZGIIaTIyUAAAVkAAARe09TLzL4TxrlAAABAAAAAGBjbWFwACT...","title":"Rendering"},{"location":"nodejs/#putting-it-together","text":"Combine everything into a complete HTML document. Embed the Base64-encoded font directly in your HTML using the @font-face rule and apply the obfuscated font to your text with CSS. This ensures that the obfuscated text is displayed correctly in the browser: <html lang=\"en\"> <head> <title>Noscrape - DEMO</title> <style> @font-face { font-family: 'noscrape-obfuscated'; src: url('data:font/truetype;charset=utf-8;base64,${font.toString(\"base64\")}'); } </style> </head> <body> <div style=\"font-family: 'noscrape-obfuscated'\">${obfuscated}</div> </body> </html>","title":"Putting it together"},{"location":"nodejs/#running-example","text":"$ git clone git@github.com:noscrape/noscrape-node-example.git $ cd noscrape-node-example $ npm install $ node src/index.js open http://localhost:1234","title":"Running Example"},{"location":"non-use-cases/","text":"NON-Use Cases While Noscrape provides a powerful tool for obfuscating text and protecting sensitive information, it's essential to understand its limitations and use it judiciously. Here are some scenarios where using Noscrape might not be appropriate: Search Engine Optimization (SEO) Noscrape renders text as obfuscated characters, making it unreadable by search engine crawlers. As a result, content obfuscated with Noscrape may not be indexed by search engines like Google, Bing, or Yahoo. This can negatively impact your website's search engine rankings and visibility. Accessibility Obfuscated text can pose accessibility challenges for users with visual impairments or those using assistive technologies such as screen readers. Screen readers rely on text to provide auditory feedback, and obfuscated text may be unintelligible or completely inaccessible to these users. Legal Compliance Using Noscrape to obfuscate legally required information, such as terms of service, privacy policies, or compliance notices, may violate regulatory requirements or legal obligations. Ensure that obfuscating such information complies with applicable laws and regulations in your jurisdiction. User Experience (UX) Obfuscated text can degrade the user experience, especially when used for essential content such as navigation menus, form labels, or instructional text. Users may find it difficult to understand or interact with obfuscated content, leading to frustration and dissatisfaction. Warranty and Liability Noscrape is provided as-is, without warranties or guarantees of any kind. While it can help protect sensitive information, misuse or improper implementation of Noscrape may lead to unintended consequences or security vulnerabilities. We cannot accept liability for any damages, losses, or legal issues arising from the use of Noscrape. Before using Noscrape, carefully consider the implications and limitations outlined above. Use Noscrape responsibly and in accordance with best practices for web development and security.","title":"NON-Use Cases"},{"location":"non-use-cases/#non-use-cases","text":"While Noscrape provides a powerful tool for obfuscating text and protecting sensitive information, it's essential to understand its limitations and use it judiciously. Here are some scenarios where using Noscrape might not be appropriate:","title":"NON-Use Cases"},{"location":"non-use-cases/#search-engine-optimization-seo","text":"Noscrape renders text as obfuscated characters, making it unreadable by search engine crawlers. As a result, content obfuscated with Noscrape may not be indexed by search engines like Google, Bing, or Yahoo. This can negatively impact your website's search engine rankings and visibility.","title":"Search Engine Optimization (SEO)"},{"location":"non-use-cases/#accessibility","text":"Obfuscated text can pose accessibility challenges for users with visual impairments or those using assistive technologies such as screen readers. Screen readers rely on text to provide auditory feedback, and obfuscated text may be unintelligible or completely inaccessible to these users.","title":"Accessibility"},{"location":"non-use-cases/#legal-compliance","text":"Using Noscrape to obfuscate legally required information, such as terms of service, privacy policies, or compliance notices, may violate regulatory requirements or legal obligations. Ensure that obfuscating such information complies with applicable laws and regulations in your jurisdiction.","title":"Legal Compliance"},{"location":"non-use-cases/#user-experience-ux","text":"Obfuscated text can degrade the user experience, especially when used for essential content such as navigation menus, form labels, or instructional text. Users may find it difficult to understand or interact with obfuscated content, leading to frustration and dissatisfaction.","title":"User Experience (UX)"},{"location":"non-use-cases/#warranty-and-liability","text":"Noscrape is provided as-is, without warranties or guarantees of any kind. While it can help protect sensitive information, misuse or improper implementation of Noscrape may lead to unintended consequences or security vulnerabilities. We cannot accept liability for any damages, losses, or legal issues arising from the use of Noscrape. Before using Noscrape, carefully consider the implications and limitations outlined above. Use Noscrape responsibly and in accordance with best practices for web development and security.","title":"Warranty and Liability"},{"location":"php/","text":"Noscrape - PHP Installation To begin, install the noscrape library using Composer, which allows you to effortlessly manage your project's dependencies: $ composer require noscrape/noscrape New Instance Create a new instance of the noscrape class by providing the path to your desired font file. This sets up noscrape to use the specified font for obfuscating text: $noscrape = new Noscrape(\"path/to/font.ttf\"); Obfuscation Obfuscate your text by calling the obfuscate method on your noscrape instance. This will convert your text into a series of unique characters from the Private Use Area (PUA) of Unicode, making it unreadable by standard means. obfuscate text $obfuscatedText = $noscrape->obfuscate(\"text to obfuscate\"); echo $obfuscatedText; > \ue41a\ue1a4\ue6b4\ue41a\uefaf\ue41a\uf1cb\uefaf\uf1cb\uebbe\ue0e3\ue49f\uf477\ue32f\uee92\ue41a\ue1a4 obfuscate a number $obfuscatedInt = $noscrape->obfuscate(1337); obfuscate an array $obfuscatedArray = $noscrape->obfuscate([ \"test\" => \"This is a Test\", \"another\" => [ \"test\" => \"This is another Test\", ] ]); /* [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\ue607\uedac\uf28a\uec14\uef3f\", \"another\" => [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\uf85c\ue95f\uef3f\uf3ec\uf28a\uf6fc\ue607\uedac\uf28a\uec14\uef3f\", ] ] */ Rendering Render the obfuscated font into a Base64-encoded string using the render method. This encoded string can then be embedded directly into your HTML for easy use: $b64Font = $noscrape->render(); echo $b64Font; > T1RUTwAJAIAAAwAQQ0ZGIIaTIyUAAAVkAAARe09TLzL4TxrlAAABAAAAAGBjbWFwACT... Putting it together Combine everything into a complete HTML document. Embed the Base64-encoded font directly in your HTML using the @font-face rule and apply the obfuscated font to your text with CSS. This ensures that the obfuscated text is displayed correctly in the browser: <!DOCTYPE html> <html lang=\"en\"> <head> <style> @font-face { font-family: 'noscrape-obfuscated'; src: url(\"data:font/truetype;charset=utf-8;base64,{{ $font }}\") } .obfuscated { font-family: \"noscrape-obfuscated\"; } </style> </head> <body> <div class=\"obfuscated\">{{ $obfuscatedText }}</div> </body> </html> Laravel Example In a Laravel application, you can easily integrate noscrape by creating a new instance of the noscrape class in your controller or route. Use the public_path function to provide the path to your font file. Pass the obfuscated text and font to your view: Route::get('/', function () { $noscrape = new Noscrape(public_path(\"font/anyfont.ttf\")); return view('welcome', [ 'title' => $noscrape->obfuscate(\"Welcome to Noscrape\"), 'description' => $noscrape->obfuscate(\"This is text is obfuscated.\"), 'font' => $noscrape->render() ]); });","title":"PHP"},{"location":"php/#noscrape-php","text":"","title":"Noscrape - PHP"},{"location":"php/#installation","text":"To begin, install the noscrape library using Composer, which allows you to effortlessly manage your project's dependencies: $ composer require noscrape/noscrape","title":"Installation"},{"location":"php/#new-instance","text":"Create a new instance of the noscrape class by providing the path to your desired font file. This sets up noscrape to use the specified font for obfuscating text: $noscrape = new Noscrape(\"path/to/font.ttf\");","title":"New Instance"},{"location":"php/#obfuscation","text":"Obfuscate your text by calling the obfuscate method on your noscrape instance. This will convert your text into a series of unique characters from the Private Use Area (PUA) of Unicode, making it unreadable by standard means.","title":"Obfuscation"},{"location":"php/#obfuscate-text","text":"$obfuscatedText = $noscrape->obfuscate(\"text to obfuscate\"); echo $obfuscatedText; > \ue41a\ue1a4\ue6b4\ue41a\uefaf\ue41a\uf1cb\uefaf\uf1cb\uebbe\ue0e3\ue49f\uf477\ue32f\uee92\ue41a\ue1a4","title":"obfuscate text"},{"location":"php/#obfuscate-a-number","text":"$obfuscatedInt = $noscrape->obfuscate(1337);","title":"obfuscate a number"},{"location":"php/#obfuscate-an-array","text":"$obfuscatedArray = $noscrape->obfuscate([ \"test\" => \"This is a Test\", \"another\" => [ \"test\" => \"This is another Test\", ] ]); /* [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\ue607\uedac\uf28a\uec14\uef3f\", \"another\" => [ \"test\" => \"\uedac\uf3ec\uef24\uec14\ue607\uef24\uec14\ue607\uef9f\uf85c\ue95f\uef3f\uf3ec\uf28a\uf6fc\ue607\uedac\uf28a\uec14\uef3f\", ] ] */","title":"obfuscate an array"},{"location":"php/#rendering","text":"Render the obfuscated font into a Base64-encoded string using the render method. This encoded string can then be embedded directly into your HTML for easy use: $b64Font = $noscrape->render(); echo $b64Font; > T1RUTwAJAIAAAwAQQ0ZGIIaTIyUAAAVkAAARe09TLzL4TxrlAAABAAAAAGBjbWFwACT...","title":"Rendering"},{"location":"php/#putting-it-together","text":"Combine everything into a complete HTML document. Embed the Base64-encoded font directly in your HTML using the @font-face rule and apply the obfuscated font to your text with CSS. This ensures that the obfuscated text is displayed correctly in the browser: <!DOCTYPE html> <html lang=\"en\"> <head> <style> @font-face { font-family: 'noscrape-obfuscated'; src: url(\"data:font/truetype;charset=utf-8;base64,{{ $font }}\") } .obfuscated { font-family: \"noscrape-obfuscated\"; } </style> </head> <body> <div class=\"obfuscated\">{{ $obfuscatedText }}</div> </body> </html>","title":"Putting it together"},{"location":"php/#laravel-example","text":"In a Laravel application, you can easily integrate noscrape by creating a new instance of the noscrape class in your controller or route. Use the public_path function to provide the path to your font file. Pass the obfuscated text and font to your view: Route::get('/', function () { $noscrape = new Noscrape(public_path(\"font/anyfont.ttf\")); return view('welcome', [ 'title' => $noscrape->obfuscate(\"Welcome to Noscrape\"), 'description' => $noscrape->obfuscate(\"This is text is obfuscated.\"), 'font' => $noscrape->render() ]); });","title":"Laravel Example"},{"location":"python/","text":"Noscrape - Python Noscrape is a Python library that protects your web content from scraping. It uses true-type fonts with shuffled unicodes to obfuscate text, making it unreadable by standard methods while still displaying correctly in browsers. This tool helps developers secure their websites from data harvesting and unauthorized scraping. Installation To begin, install the noscrape library using pip : pip install noscrape New Instance Create a new instance of the noscrape class by providing the path to your desired font file. This sets up noscrape to use the specified font for obfuscating text: from noscrape import Noscrape noscrape_instance = Noscrape(\"/path/to/font.ttf\") Obfuscation Obfuscate your text by calling the obfuscate method on your noscrape instance. This will convert your text into a series of unique characters from the Private Use Area (PUA) of Unicode, making it unreadable by standard means: text = noscrape.obfuscate(\"text to obfuscate\") print(text) # \ue41a\ue1a4\ue6b4\ue41a\uefaf\ue41a\uf1cb\uefaf\uf1cb\uebbe\ue0e3\ue49f\uf477\ue32f\uee92\ue41a\ue1a4 # one could also obfuscate an integer obfuscatedInt = noscrape.obfuscate(1337) # or an list input_list = [\"text1\", 1234, \"this is the output\", 5678] obfuscated_list = noscrape.obfuscate(input_list) print(\"%s\" % json.dumps(obfuscated_list, ensure_ascii=False)) # [\"\uee93\ue7fa\ue2fd\uee93\ue8a0\", \"\ue8a0\uf518\ue1b1\uf1d0\", \"\uee93\uf250\ue881\uecbb\uf3bc\ue881\uecbb\uf3bc\uee93\uf250\ue7fa\uf3bc\uf485\uf2db\uee93\uf74b\uf2db\uee93\", \"\uf69e\ue16e\ue5e3\ue7bd\"] Rendering Render the obfuscated font into a Base64-encoded string using the render method. This encoded string can then be embedded directly into your HTML for easy use: b64_font = noscrape.render() print(b64_font) # T1RUTwAJAIAAAwAQQ0ZGIIaTIyUAAAVkAAARe09TLzL4TxrlAAABAAAAAGBjbWFwACT... Putting it together Combine everything into a complete HTML document. Embed the Base64-encoded font directly in your HTML using the @font-face rule and apply the obfuscated font to your text with CSS. This ensures that the obfuscated text is displayed correctly in the browser: <html lang=\"en\"> <head> <title>Noscrape - DEMO</title> <style> @font-face { font-family: 'noscrape-obfuscated'; src: url('data:font/truetype;charset=utf-8;base64,{{b64_font}}'); } </style> </head> <body> <div style=\"font-family: 'noscrape-obfuscated'\">{{obfuscated_text}}</div> </body> </html>","title":"Python"},{"location":"python/#noscrape-python","text":"Noscrape is a Python library that protects your web content from scraping. It uses true-type fonts with shuffled unicodes to obfuscate text, making it unreadable by standard methods while still displaying correctly in browsers. This tool helps developers secure their websites from data harvesting and unauthorized scraping.","title":"Noscrape - Python"},{"location":"python/#installation","text":"To begin, install the noscrape library using pip : pip install noscrape","title":"Installation"},{"location":"python/#new-instance","text":"Create a new instance of the noscrape class by providing the path to your desired font file. This sets up noscrape to use the specified font for obfuscating text: from noscrape import Noscrape noscrape_instance = Noscrape(\"/path/to/font.ttf\")","title":"New Instance"},{"location":"python/#obfuscation","text":"Obfuscate your text by calling the obfuscate method on your noscrape instance. This will convert your text into a series of unique characters from the Private Use Area (PUA) of Unicode, making it unreadable by standard means: text = noscrape.obfuscate(\"text to obfuscate\") print(text) # \ue41a\ue1a4\ue6b4\ue41a\uefaf\ue41a\uf1cb\uefaf\uf1cb\uebbe\ue0e3\ue49f\uf477\ue32f\uee92\ue41a\ue1a4 # one could also obfuscate an integer obfuscatedInt = noscrape.obfuscate(1337) # or an list input_list = [\"text1\", 1234, \"this is the output\", 5678] obfuscated_list = noscrape.obfuscate(input_list) print(\"%s\" % json.dumps(obfuscated_list, ensure_ascii=False)) # [\"\uee93\ue7fa\ue2fd\uee93\ue8a0\", \"\ue8a0\uf518\ue1b1\uf1d0\", \"\uee93\uf250\ue881\uecbb\uf3bc\ue881\uecbb\uf3bc\uee93\uf250\ue7fa\uf3bc\uf485\uf2db\uee93\uf74b\uf2db\uee93\", \"\uf69e\ue16e\ue5e3\ue7bd\"]","title":"Obfuscation"},{"location":"python/#rendering","text":"Render the obfuscated font into a Base64-encoded string using the render method. This encoded string can then be embedded directly into your HTML for easy use: b64_font = noscrape.render() print(b64_font) # T1RUTwAJAIAAAwAQQ0ZGIIaTIyUAAAVkAAARe09TLzL4TxrlAAABAAAAAGBjbWFwACT...","title":"Rendering"},{"location":"python/#putting-it-together","text":"Combine everything into a complete HTML document. Embed the Base64-encoded font directly in your HTML using the @font-face rule and apply the obfuscated font to your text with CSS. This ensures that the obfuscated text is displayed correctly in the browser: <html lang=\"en\"> <head> <title>Noscrape - DEMO</title> <style> @font-face { font-family: 'noscrape-obfuscated'; src: url('data:font/truetype;charset=utf-8;base64,{{b64_font}}'); } </style> </head> <body> <div style=\"font-family: 'noscrape-obfuscated'\">{{obfuscated_text}}</div> </body> </html>","title":"Putting it together"},{"location":"use-cases/","text":"Use-Cases In an era where artificial intelligence is becoming increasingly integral to our daily lives, it's important to remember that AI thrives on data, and your data is a valuable commodity that shouldn't be given away lightly. Here are some key use-cases for noscrape: Anti-Scraping Measures for Websites Implement noscrape on your website to protect against web scrapers. This can be particularly useful for content that is unique to your site, which you wish to prevent from being copied or used without permission. Examples include: Sport Results : Protect live scores, match results, and player statistics from being scraped by unauthorized websites. Betting Results : Secure betting odds and results to ensure they are not exploited by competitors or automated bots. Prices (e-commerce) : Shield your product prices, discounts, and special offers from price comparison tools and competitors. Geo-information : Safeguard sensitive geographic data, such as location-based services, from unauthorized use. Protecting Sensitive Data Use noscrape to obfuscate sensitive information such as personal identifiers, financial details, or confidential text in a way that is visually accessible but protected against scraping and automated data extraction tools. This is particularly relevant for: Personal Identifiers : Securely display Social Security numbers, driver's license numbers, or other personal identifiers. Financial Details : Protect credit card numbers, bank account details, and transaction information. Confidential Text : Obfuscate proprietary information, trade secrets, or sensitive communication. Reduce Bot Interactions Once your data is protected by noscrape, it makes no sense for scrapers to target it, thereby reducing the number of bot interactions and lowering associated costs. This can help: Improve Server Performance : Reduce the load on your servers by minimizing bot traffic. Enhance User Experience : Ensure that legitimate users experience faster load times and fewer disruptions. Lower Operational Costs : Decrease the resources and costs associated with handling excessive bot traffic. Secure Applications In applications where data security is paramount, such as in banking or healthcare apps, noscrape can be used to display information in a secure manner. Examples include: PIN/TAN Numbers : Obfuscate personal identification numbers and transaction authentication numbers to prevent unauthorized access. Bot Protection (Captcha) : Use noscrape to generate secure captchas that are resistant to automated solving. Medical Records : Protect sensitive patient information and medical records from being scraped or exposed. Legal Documents : Secure confidential legal documents, contracts, and agreements. Educational Content Protection If your website offers educational content or proprietary learning material, noscrape can help ensure that only authorized users have access to it, preventing unauthorized distribution: Online Courses : Protect course materials, quizzes, and answers from being copied. Research Papers : Safeguard your academic and scientific research from unauthorized duplication. E-books and Articles : Secure digital books and premium articles against unauthorized sharing. Job Listings and Classifieds If your site offers job listings or classified ads, noscrape can protect this valuable content from being harvested by competitors or spam bots: Job Listings : Prevent automated bots from scraping job postings and candidate information. Classified Ads : Secure classified ads to ensure they are not exploited by competitors or spammers. Real Estate Listings For real estate websites, noscrape can protect property listings, prices, and other sensitive information: Property Details : Obfuscate property descriptions, prices, and contact information to prevent unauthorized copying. Agent Information : Protect real estate agent profiles and contact details from being scraped. By leveraging noscrape in these various use-cases, you can effectively safeguard your valuable data, enhance security, and ensure that your content remains accessible only to authorized users.","title":"Use Cases"},{"location":"use-cases/#use-cases","text":"In an era where artificial intelligence is becoming increasingly integral to our daily lives, it's important to remember that AI thrives on data, and your data is a valuable commodity that shouldn't be given away lightly. Here are some key use-cases for noscrape:","title":"Use-Cases"},{"location":"use-cases/#anti-scraping-measures-for-websites","text":"Implement noscrape on your website to protect against web scrapers. This can be particularly useful for content that is unique to your site, which you wish to prevent from being copied or used without permission. Examples include: Sport Results : Protect live scores, match results, and player statistics from being scraped by unauthorized websites. Betting Results : Secure betting odds and results to ensure they are not exploited by competitors or automated bots. Prices (e-commerce) : Shield your product prices, discounts, and special offers from price comparison tools and competitors. Geo-information : Safeguard sensitive geographic data, such as location-based services, from unauthorized use.","title":"Anti-Scraping Measures for Websites"},{"location":"use-cases/#protecting-sensitive-data","text":"Use noscrape to obfuscate sensitive information such as personal identifiers, financial details, or confidential text in a way that is visually accessible but protected against scraping and automated data extraction tools. This is particularly relevant for: Personal Identifiers : Securely display Social Security numbers, driver's license numbers, or other personal identifiers. Financial Details : Protect credit card numbers, bank account details, and transaction information. Confidential Text : Obfuscate proprietary information, trade secrets, or sensitive communication.","title":"Protecting Sensitive Data"},{"location":"use-cases/#reduce-bot-interactions","text":"Once your data is protected by noscrape, it makes no sense for scrapers to target it, thereby reducing the number of bot interactions and lowering associated costs. This can help: Improve Server Performance : Reduce the load on your servers by minimizing bot traffic. Enhance User Experience : Ensure that legitimate users experience faster load times and fewer disruptions. Lower Operational Costs : Decrease the resources and costs associated with handling excessive bot traffic.","title":"Reduce Bot Interactions"},{"location":"use-cases/#secure-applications","text":"In applications where data security is paramount, such as in banking or healthcare apps, noscrape can be used to display information in a secure manner. Examples include: PIN/TAN Numbers : Obfuscate personal identification numbers and transaction authentication numbers to prevent unauthorized access. Bot Protection (Captcha) : Use noscrape to generate secure captchas that are resistant to automated solving. Medical Records : Protect sensitive patient information and medical records from being scraped or exposed. Legal Documents : Secure confidential legal documents, contracts, and agreements.","title":"Secure Applications"},{"location":"use-cases/#educational-content-protection","text":"If your website offers educational content or proprietary learning material, noscrape can help ensure that only authorized users have access to it, preventing unauthorized distribution: Online Courses : Protect course materials, quizzes, and answers from being copied. Research Papers : Safeguard your academic and scientific research from unauthorized duplication. E-books and Articles : Secure digital books and premium articles against unauthorized sharing.","title":"Educational Content Protection"},{"location":"use-cases/#job-listings-and-classifieds","text":"If your site offers job listings or classified ads, noscrape can protect this valuable content from being harvested by competitors or spam bots: Job Listings : Prevent automated bots from scraping job postings and candidate information. Classified Ads : Secure classified ads to ensure they are not exploited by competitors or spammers.","title":"Job Listings and Classifieds"},{"location":"use-cases/#real-estate-listings","text":"For real estate websites, noscrape can protect property listings, prices, and other sensitive information: Property Details : Obfuscate property descriptions, prices, and contact information to prevent unauthorized copying. Agent Information : Protect real estate agent profiles and contact details from being scraped. By leveraging noscrape in these various use-cases, you can effectively safeguard your valuable data, enhance security, and ensure that your content remains accessible only to authorized users.","title":"Real Estate Listings"}]}